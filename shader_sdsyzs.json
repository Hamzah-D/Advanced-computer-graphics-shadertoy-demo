{
 "ver": "0.1",
 "info": {
  "id": "sdsyzs",
  "date": "1642560992",
  "viewed": 12,
  "name": "Inside a torus",
  "description": "Raymarching inside a torus",
  "likes": 0,
  "published": "Unlisted",
  "usePreview": 0,
  "tags": [
   "torus",
   "ripple"
  ],
  "hasliked": 0,
  "parentid": "",
  "parentname": ""
 },
 "renderpass": [
  {
   "inputs": [],
   "outputs": [
    {
     "id": "4dfGRr",
     "channel": 0
    }
   ],
   "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n    \n    //add time for animation\n    float t = iTime * 0.2;\n    \n    //camera setup\n    vec3 ro = vec3(0, 0, -1); \n    vec3 lookAt = vec3(0);\n    float zoom = 0.5;\n    \n    //get ray direction using forward vector, right vector, camera up, ceer of the screen and intersection point\n    vec3 f = normalize(lookAt-ro),\n         r = normalize(cross(vec3(0, 1, 0), f)),//cross product between forward and up vectors   \n         u = cross(f, r),\n         c = ro + f* zoom, \n         i = c + uv.x* r + uv.y* u,\n         rd = normalize (i-ro);\n         \n    //raymarcher using distance to origin, distance to surface, march point\n    float dS, dO;\n    vec3 p;\n    \n    for(int i = 0; i < 100; i++)\n    {\n        p = ro + rd* dO;\n        //distance function for a torus\n        dS = -(length(vec2(length(p.xz)-1.0, p.y)) - 0.75); //inverted to give an inside view\n        //check for hit or step forward\n        if(dS<0.001) break;\n        dO += dS;\n    }\n\n    // Black screen\n    vec3 col = vec3(0);\n    \n    \n    if(dS<0.001)\n    {\n        //get polar coordinates (goes from -pi to pi with atan)\n        float x = atan(p.x, p.z) + t*0.5;\n        float y = atan(length(p.xz)-1.0, p.y);\n               \n        float bands = sin(y*10.0 + x*30.0); //for the lines and twist\n        \n        float ripples = sin((-x*10.0 + y*30.0)*3.0)* 0.5 + 0.5; //for ripple effect\n        \n        float waves = sin(-x*2.0 + y*6.0); //for wave effect\n        \n        //add smoothstep for better colour transition and band control\n        float b1 = smoothstep(-0.2, 0.2, bands);\n        float b2 = smoothstep(-0.2, 0.2, bands -0.5);\n        \n        float m = b1*(1.0-b2);\n        m = max(m, ripples*b2*max(0.0, waves)); //show ripples and waves inside the lines\n        m += max(0.0, waves*0.3*b2);\n        //col += m;\n        col += mix(m, 1.0-m, smoothstep(-0.3, 0.3, sin(x+t)));\n    }\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n    \n}\n\n//inspired by: \n//https://www.shadertoy.com/view/td2GRw  \n//https://turtletoy.net/turtle/90e6288a6b \n//https://www.youtube.com/watch?v=rA9NmBRqfjI&list=PLGmrMu-IwbguU_nY2egTFmlg691DN7uE5&index=28\n//raymarching functionality is based on this video https://www.youtube.com/watch?v=PGtv-dBi2wE",
   "name": "Image",
   "description": "",
   "type": "image"
  }
 ]
}